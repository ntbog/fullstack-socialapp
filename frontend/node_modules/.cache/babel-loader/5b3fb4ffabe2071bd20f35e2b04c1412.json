{"ast":null,"code":"import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  }); //useCallback to avoid infinite loops with useEffect in <Input/>\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  });\n  return [formState, inputHandler];\n};","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/projects/social-app/src/shared/hooks/form-hooks.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id","setFormData","inputData","formValidity"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,cAAL;AACC,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AACnC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC/BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACA,SAFD,MAEO;AACNH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACA;AACD;;AACD,aAAO,EACN,GAAGN,KADG;AAENK,QAAAA,MAAM,EAAE,EACP,GAAGL,KAAK,CAACK,MADF;AAEP,WAACJ,MAAM,CAACG,OAAR,GAAkB;AACjBG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KADG;AAEjBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAFC;AAFX,SAFF;AASNA,QAAAA,OAAO,EAAEH;AATH,OAAP;;AAWD;AACC,aAAOH,KAAP;AAtBF;AAwBA,CAzBD;;AA2BA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAC9D,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBd,UAAU,CAACC,WAAD,EAAc;AACrDM,IAAAA,MAAM,EAAEI,aAD6C;AAErDH,IAAAA,OAAO,EAAEI;AAF4C,GAAd,CAAxC,CAD8D,CAM9D;;AACA,QAAMG,YAAY,GAAGhB,WAAW,CAAC,CAACiB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AACxDM,IAAAA,QAAQ,CAAC;AACRV,MAAAA,IAAI,EAAE,cADE;AAERK,MAAAA,KAAK,EAAEA,KAFC;AAGRD,MAAAA,OAAO,EAAEA,OAHD;AAIRF,MAAAA,OAAO,EAAEU;AAJD,KAAD,CAAR;AAMA,GAP+B,EAO7B,EAP6B,CAAhC;AASA,QAAMC,WAAW,GAAGlB,WAAW,CAAC,CAACmB,SAAD,EAAYC,YAAZ,KAA6B;AAC5DL,IAAAA,QAAQ,CAAC;AACRV,MAAAA,IAAI,EAAE,UADE;AAERG,MAAAA,MAAM,EAAEW,SAFA;AAGRb,MAAAA,WAAW,EAAEc;AAHL,KAAD,CAAR;AAKA,GAN8B,CAA/B;AAQA,SAAO,CAACN,SAAD,EAAYE,YAAZ,CAAP;AACA,CAzBM","sourcesContent":["import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'INPUT_CHANGE':\r\n\t\t\tlet formIsValid = true;\r\n\t\t\tfor (const inputId in state.inputs) {\r\n\t\t\t\tif (inputId === action.inputId) {\r\n\t\t\t\t\tformIsValid = formIsValid && action.isValid;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tformIsValid = formIsValid && state.inputs[inputId].isValid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tinputs: {\r\n\t\t\t\t\t...state.inputs,\r\n\t\t\t\t\t[action.inputId]: {\r\n\t\t\t\t\t\tvalue: action.value,\r\n\t\t\t\t\t\tisValid: action.isValid\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tisValid: formIsValid\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n\tconst [formState, dispatch] = useReducer(formReducer, {\r\n\t\tinputs: initialInputs,\r\n\t\tisValid: initialFormValidity\r\n\t});\r\n\r\n\t//useCallback to avoid infinite loops with useEffect in <Input/>\r\n\tconst inputHandler = useCallback((id, value, isValid) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'INPUT_CHANGE',\r\n\t\t\tvalue: value,\r\n\t\t\tisValid: isValid,\r\n\t\t\tinputId: id\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst setFormData = useCallback((inputData, formValidity) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'SET_DATA',\r\n\t\t\tinputs: inputData,\r\n\t\t\tformIsValid: formValidity\r\n\t\t});\r\n\t});\r\n\r\n\treturn [formState, inputHandler];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}